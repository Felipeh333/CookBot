# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hover_g2/Limites_HSV.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Limites_HSV(genpy.Message):
  _md5sum = "1da70970024bb36e2e67463d917ecd1f"
  _type = "hover_g2/Limites_HSV"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 H_I
uint8 S_I
uint8 V_I
uint8 H_S
uint8 S_S
uint8 V_S"""
  __slots__ = ['H_I','S_I','V_I','H_S','S_S','V_S']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       H_I,S_I,V_I,H_S,S_S,V_S

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Limites_HSV, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.H_I is None:
        self.H_I = 0
      if self.S_I is None:
        self.S_I = 0
      if self.V_I is None:
        self.V_I = 0
      if self.H_S is None:
        self.H_S = 0
      if self.S_S is None:
        self.S_S = 0
      if self.V_S is None:
        self.V_S = 0
    else:
      self.H_I = 0
      self.S_I = 0
      self.V_I = 0
      self.H_S = 0
      self.S_S = 0
      self.V_S = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.H_I, _x.S_I, _x.V_I, _x.H_S, _x.S_S, _x.V_S))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.H_I, _x.S_I, _x.V_I, _x.H_S, _x.S_S, _x.V_S,) = _get_struct_6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.H_I, _x.S_I, _x.V_I, _x.H_S, _x.S_S, _x.V_S))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.H_I, _x.S_I, _x.V_I, _x.H_S, _x.S_S, _x.V_S,) = _get_struct_6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
