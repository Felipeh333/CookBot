// Generated by gencpp from file hover_g2/Limites_HSV.msg
// DO NOT EDIT!


#ifndef HOVER_G2_MESSAGE_LIMITES_HSV_H
#define HOVER_G2_MESSAGE_LIMITES_HSV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hover_g2
{
template <class ContainerAllocator>
struct Limites_HSV_
{
  typedef Limites_HSV_<ContainerAllocator> Type;

  Limites_HSV_()
    : H_I(0)
    , S_I(0)
    , V_I(0)
    , H_S(0)
    , S_S(0)
    , V_S(0)  {
    }
  Limites_HSV_(const ContainerAllocator& _alloc)
    : H_I(0)
    , S_I(0)
    , V_I(0)
    , H_S(0)
    , S_S(0)
    , V_S(0)  {
  (void)_alloc;
    }



   typedef uint8_t _H_I_type;
  _H_I_type H_I;

   typedef uint8_t _S_I_type;
  _S_I_type S_I;

   typedef uint8_t _V_I_type;
  _V_I_type V_I;

   typedef uint8_t _H_S_type;
  _H_S_type H_S;

   typedef uint8_t _S_S_type;
  _S_S_type S_S;

   typedef uint8_t _V_S_type;
  _V_S_type V_S;





  typedef boost::shared_ptr< ::hover_g2::Limites_HSV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hover_g2::Limites_HSV_<ContainerAllocator> const> ConstPtr;

}; // struct Limites_HSV_

typedef ::hover_g2::Limites_HSV_<std::allocator<void> > Limites_HSV;

typedef boost::shared_ptr< ::hover_g2::Limites_HSV > Limites_HSVPtr;
typedef boost::shared_ptr< ::hover_g2::Limites_HSV const> Limites_HSVConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hover_g2::Limites_HSV_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hover_g2::Limites_HSV_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hover_g2::Limites_HSV_<ContainerAllocator1> & lhs, const ::hover_g2::Limites_HSV_<ContainerAllocator2> & rhs)
{
  return lhs.H_I == rhs.H_I &&
    lhs.S_I == rhs.S_I &&
    lhs.V_I == rhs.V_I &&
    lhs.H_S == rhs.H_S &&
    lhs.S_S == rhs.S_S &&
    lhs.V_S == rhs.V_S;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hover_g2::Limites_HSV_<ContainerAllocator1> & lhs, const ::hover_g2::Limites_HSV_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hover_g2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hover_g2::Limites_HSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hover_g2::Limites_HSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hover_g2::Limites_HSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hover_g2::Limites_HSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hover_g2::Limites_HSV_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hover_g2::Limites_HSV_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hover_g2::Limites_HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1da70970024bb36e2e67463d917ecd1f";
  }

  static const char* value(const ::hover_g2::Limites_HSV_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1da70970024bb36eULL;
  static const uint64_t static_value2 = 0x2e67463d917ecd1fULL;
};

template<class ContainerAllocator>
struct DataType< ::hover_g2::Limites_HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hover_g2/Limites_HSV";
  }

  static const char* value(const ::hover_g2::Limites_HSV_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hover_g2::Limites_HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 H_I\n"
"uint8 S_I\n"
"uint8 V_I\n"
"uint8 H_S\n"
"uint8 S_S\n"
"uint8 V_S\n"
;
  }

  static const char* value(const ::hover_g2::Limites_HSV_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hover_g2::Limites_HSV_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.H_I);
      stream.next(m.S_I);
      stream.next(m.V_I);
      stream.next(m.H_S);
      stream.next(m.S_S);
      stream.next(m.V_S);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Limites_HSV_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hover_g2::Limites_HSV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hover_g2::Limites_HSV_<ContainerAllocator>& v)
  {
    s << indent << "H_I: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.H_I);
    s << indent << "S_I: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.S_I);
    s << indent << "V_I: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V_I);
    s << indent << "H_S: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.H_S);
    s << indent << "S_S: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.S_S);
    s << indent << "V_S: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.V_S);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOVER_G2_MESSAGE_LIMITES_HSV_H
